Line wrap
<!DOCTYPE html>
<html lang="en">

<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>SVG Hat Tile</title>
</head>

<body>
<h1>SVG Hat Tile</h1>
<p>
Just playing around with SVG trying to draw this "Einstein Hat Tile".
Started with a tiling of quadrilaterals having angles 60&#176;, 90&#176;, 120&#176; and 90&#176;.
</p>
<p>
<a target="_blank" href="https://www.sciencenews.org/article/mathematicians-discovered-einstein-tile">Science News article</a>
</p>
<!-- https://www.sciencenews.org/article/mathematicians-discovered-einstein-tile -->
<svg id="svgHat" width="800" height="800" style="background-color: #999999;">

</svg>

<script>
// adapted from http://stackoverflow.com/questions/12786797/how-to-draw-rectangles-dynamically-in-svg
var svgns = "http://www.w3.org/2000/svg";

let SIDE = 96;
let x;
let y;

//

let cos30 = Math.cos(Math.PI / 6); // sqrt3/2
let tan30 = Math.tan(Math.PI/6); // 1/sqrt3
let sqrt3 = Math.sqrt(3);
for (let i = -3; i <= 3; i++) {

for (let j = -3; j <= 3; j++) {
//x = 400 + i * SIDE * (cos30 + tan30 / 2 + 1 / (2 * cos30));
x = 400 + i * SIDE * sqrt3;
y = 400 + (2 * j + i) * SIDE;

if(x<0 || x> 800 || y<0 || y> 800){
continue;
}

//let myPoints = `${x},${y} ${x + SIDE * cos30},${y + SIDE / 2} ${x + SIDE * cos30 + SIDE / 2 * tan30},${y} ${x + SIDE * cos30},${y - SIDE / 2}`
let myPoints = `${x},${y} ${x + SIDE * sqrt3/2},${y + SIDE / 2} ${x + SIDE * 2/sqrt3},${y} ${x + SIDE * sqrt3/2},${y - SIDE / 2}`
//console.log(myPoints)

// rotate 60 degrees 6 times
for (let theta = 0; theta < 360; theta += 60) {

let myRotate = `rotate(${theta}, ${x}, ${y})`;
let myPoly = document.createElementNS(svgns, 'polygon');
myPoly.setAttributeNS(null, 'fill', "lime");
myPoly.setAttributeNS(null, 'stroke', "purple");
myPoly.setAttributeNS(null, 'points', myPoints);
myPoly.setAttributeNS(null, 'transform', myRotate);
document.getElementById('svgHat').appendChild(myPoly);
}

}
}

//*************************************************************

x=400;
y=400;

hatPoints = `${x},${y} `
hatPoints += ` ${x + SIDE * sqrt3/2},${y + SIDE / 2}`
hatPoints += ` ${x + SIDE * 2/sqrt3},${y}`
hatPoints += ` ${x + SIDE * sqrt3},${y}`
hatPoints += ` ${x + SIDE * sqrt3},${y -SIDE}`
hatPoints += ` ${x + SIDE * sqrt3/2},${y-3/2*SIDE}`
hatPoints += ` ${x + SIDE * 2/sqrt3},${y-2*SIDE}`
hatPoints += ` ${x + SIDE * sqrt3/2},${y-5/2*SIDE}`
hatPoints += ` ${x},${y-2*SIDE}`
hatPoints += ` ${x},${y-SIDE}`
hatPoints += ` ${x-SIDE/sqrt3},${y-SIDE}`
//hatPoints += ` ${x-SIDE*sqrt3/2},${y-SIDE/2}`
// on different constituent tiles but along same line
hatPoints += ` ${x-SIDE*2/sqrt3},${y}`
hatPoints += ` ${x-SIDE*sqrt3/2},${y+SIDE/2}`

console.log(hatPoints)

hatPoly = document.createElementNS(svgns, 'polygon');
hatPoly.setAttributeNS(null, 'fill', "blue");
hatPoly.setAttributeNS(null, 'fill-opacity', "0.5");
hatPoly.setAttributeNS(null, 'stroke', "purple");
hatPoly.setAttributeNS(null, 'points', hatPoints);
document.getElementById('svgHat').appendChild(hatPoly);
</script>
</body>

</html>